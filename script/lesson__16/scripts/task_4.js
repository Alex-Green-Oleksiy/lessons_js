"use strict";

function checkNaturalNumber(value, message) {
    if (value <= 0 || isNaN(value) || typeof value !== "number")
        throw new Error(message);
}

class Banknote {
    #banknote;
    #amount;

    constructor(banknote, amount) {
        this.banknote = banknote;
        this.amount = amount;
    }

    get banknote() {
        return this.#banknote;
    }

    set banknote(newBanknote) {
        checkNaturalNumber(newBanknote, "–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª –±–∞–Ω–∫–Ω–æ—Ç–∏");
        this.#banknote = newBanknote;
    }

    get amount() {
        return this.#amount;
    }

    set amount(newAmount) {
        checkNaturalNumber(newAmount, "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ø—é—Ä");
        this.#amount = newAmount;
    }
}

class TBankomat {
    constructor(banknotesList) {
        this.banknotesList = banknotesList;
    }

    getMaxAvailableSum() {
        return this.banknotesList.reduce(
            (prevSum, el) => prevSum + el.banknote * el.amount,
            0
        );
    }

    getMinAvailableSum() {
        return Math.min(
            ...this.banknotesList
                .filter((b) => b.amount > 0)
                .map((b) => b.banknote)
        );
    }

    canWithdraw(moneyAmount) {
        try {
            this.withdrawMoney(moneyAmount);
            return true;
        } catch {
            return false;
        }
    }

    addBanknotes(banknote, amount) {
        const existing = this.banknotesList.find(
            (b) => b.banknote === banknote
        );
        if (existing) {
            existing.amount += amount;
        } else {
            this.banknotesList.push(new Banknote(banknote, amount));
        }
    }

    withdrawMoney(moneyAmount) {
        if (moneyAmount <= 0 || moneyAmount % 5 !== 0) {
            throw new Error("–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–æ—é —Ç–∞ –∫—Ä–∞—Ç–Ω–æ—é 5 –≥—Ä–∏–≤–Ω—è–º");
        }
        if (moneyAmount > this.getMaxAvailableSum()) {
            throw new Error("–í –±–∞–Ω–∫–æ–º–∞—Ç—ñ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –∫—É–ø—é—Ä");
        }

        const sortedList = this.banknotesList
            .slice()
            .sort((a, b) => b.banknote - a.banknote);
        const result = {};

        while (moneyAmount > 0) {
            let found = false;
            for (let el of sortedList) {
                if (el.amount > 0) {
                    const banknoteAmountNeed = Math.floor(
                        moneyAmount / el.banknote
                    );
                    const banknoteAmountTake = Math.min(
                        banknoteAmountNeed,
                        el.amount
                    );

                    if (banknoteAmountTake > 0) {
                        moneyAmount -= banknoteAmountTake * el.banknote;
                        result[el.banknote] =
                            (result[el.banknote] || 0) + banknoteAmountTake;
                        el.amount -= banknoteAmountTake;
                        found = true;
                        break;
                    }
                }
            }
            if (!found) {
                throw new Error(
                    "–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞—Ç–∏ –≤–∫–∞–∑–∞–Ω—É —Å—É–º—É –Ω–∞—è–≤–Ω–∏–º–∏ –∫—É–ø—é—Ä–∞–º–∏"
                );
            }
        }

        return result;
    }

    getCurrentState() {
        return this.banknotesList.map((b) => ({
            banknote: b.banknote,
            amount: b.amount
        }));
    }
}

function runTests() {
    console.log("üîç –¢–µ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—ñ–≤ TBankomat —Ç–∞ Banknote");

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫—É–ø—é—Ä
    const banknotes = [
        new Banknote(5, 5), // 25
        new Banknote(10, 5), // 50
        new Banknote(20, 5), // 100
        new Banknote(50, 5), // 250
        new Banknote(100, 5), // 500
        new Banknote(200, 5) // 1000
    ];
    const atm = new TBankomat(banknotes);

    // –¢–µ—Å—Ç 1: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞
    const maxSum = atm.getMaxAvailableSum();
    console.assert(
        maxSum === 1925,
        `‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ getMaxAvailableSum. –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è 1925, –æ—Ç—Ä–∏–º–∞–Ω–æ ${maxSum}`
    );

    // –¢–µ—Å—Ç 2: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞
    const minSum = atm.getMinAvailableSum();
    console.assert(
        minSum === 5,
        `‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ getMinAvailableSum. –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è 5, –æ—Ç—Ä–∏–º–∞–Ω–æ ${minSum}`
    );

    // –¢–µ—Å—Ç 3: –£—Å–ø—ñ—à–Ω–µ –∑–Ω—è—Ç—Ç—è
    const result = atm.withdrawMoney(385);
    const expected = { 200: 1, 100: 1, 50: 1, 20: 1, 10: 1, 5: 1 };
    console.assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω—è—Ç—Ç—ñ 385. –û—Ç—Ä–∏–º–∞–Ω–æ: ${JSON.stringify(result)}`
    );

    // –¢–µ—Å—Ç 4: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω—è—Ç—Ç—ñ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–æ—ó —Å—É–º–∏
    let errorCaught = false;
    try {
        atm.withdrawMoney(9999);
    } catch (err) {
        errorCaught = true;
    }
    console.assert(
        errorCaught,
        "‚ùå –û—á—ñ–∫—É–≤–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω—è—Ç—Ç—ñ —Å—É–º–∏, –±—ñ–ª—å—à–æ—ó –∑–∞ –Ω–∞—è–≤–Ω—É"
    );

    // –¢–µ—Å—Ç 5: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª
    try {
        new Banknote(-10, 5);
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª –Ω–µ –≤–∏–∫–ª–∏–∫–∞–≤ –≤–∏–Ω—è—Ç–∫—É");
    } catch (e) {
        console.log("‚úÖ –¢–µ—Å—Ç –Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª –ø—Ä–æ–π–¥–µ–Ω–æ");
    }

    // –¢–µ—Å—Ç 6: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ø—é—Ä
    try {
        new Banknote(10, -5);
        console.error(
            "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ø—é—Ä –Ω–µ –≤–∏–∫–ª–∏–∫–∞–ª–∞ –≤–∏–Ω—è—Ç–∫—É"
        );
    } catch (e) {
        console.log("‚úÖ –¢–µ—Å—Ç –Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ø—é—Ä –ø—Ä–æ–π–¥–µ–Ω–æ");
    }

    // –¢–µ—Å—Ç 7: –°—É–º–∞ –Ω–µ –∫—Ä–∞—Ç–Ω–∞ 5
    try {
        atm.withdrawMoney(387);
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞ –Ω–µ –≤–∏–∫–ª–∏–∫–∞–ª–∞ –≤–∏–Ω—è—Ç–∫—É");
    } catch (e) {
        console.log("‚úÖ –¢–µ—Å—Ç –Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É –ø—Ä–æ–π–¥–µ–Ω–æ");
    }

    // –¢–µ—Å—Ç 8: –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–Ω–∫–Ω–æ—Ç
    atm.addBanknotes(200, 2);
    console.assert(
        atm.getCurrentState().find((b) => b.banknote === 200).amount === 7,
        "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—ñ –±–∞–Ω–∫–Ω–æ—Ç"
    );

    // –¢–µ—Å—Ç 9: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑–Ω—è—Ç—Ç—è
    console.assert(
        atm.canWithdraw(385),
        "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑–Ω—è—Ç—Ç—è"
    );
    console.assert(
        !atm.canWithdraw(9999),
        "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑–Ω—è—Ç—Ç—è"
    );

    console.log("‚úÖ –£—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
}

// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
try {
    const banknotesList = [
        new Banknote(5, 5),
        new Banknote(10, 5),
        new Banknote(20, 5),
        new Banknote(50, 5),
        new Banknote(100, 5),
        new Banknote(200, 5)
    ];
    const atm = new TBankomat(banknotesList);

    document.write(`
        <h2>–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –±–∞–Ω–∫–æ–º–∞—Ç–∞</h2>
        <p>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å–∫–ª–∞–¥–∞—î <span>${atm.getMaxAvailableSum()} –≥—Ä–Ω</span></p>
        <p>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å–∫–ª–∞–¥–∞—î <span>${atm.getMinAvailableSum()} –≥—Ä–Ω</span></p>
    `);

    console.log("–ó–Ω—è—Ç—Ç—è 385 –≥—Ä–Ω:");
    console.log(atm.withdrawMoney(385));
    console.log("–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –±–∞–Ω–∫–æ–º–∞—Ç–∞:");
    console.log(atm.getCurrentState());
} catch (error) {
    document.write(error);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
runTests();
